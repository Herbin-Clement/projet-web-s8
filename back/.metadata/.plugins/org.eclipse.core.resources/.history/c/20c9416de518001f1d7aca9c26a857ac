package pack;

import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.*;

@WebServlet("/servlet")
public class Servlet extends HttpServlet {
	
	@EJB
	Facade facade;
	
	private static final long serialVersionUID = 1L;
      
	/* Va servir à convertir les données Json en objets Java */
	private ObjectMapper objectMapper = new ObjectMapper();
	
    public Servlet() {
        super();
    }

    // TOOD : il faut un status dans tous les cas. Si status ok, mettre dans data les données envoyées au client
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");	
		String op = request.getParameter("op");
		// classe User
		if (op.equals("register")) {
			User user = new Gson().fromJson(request.getReader(), User.class);
			boolean usernameNotUsed = facade.addUser(user);
			if (!usernameNotUsed) {
		        response.getWriter().write("{\"status\":\"ko\",\"message\":\"Username already used.\"}");
			} else {
                response.getWriter().write("{\"status\":\"ok\",\"message\":\"User added successfully.\"}");
			}
			
			
			
		} else if (op.equals("listUsers")) {
			Collection<User> listUsers = facade.listUsers();
			String jsonResponse = objectMapper.writeValueAsString(listUsers);
	        response.getWriter().write(jsonResponse);
	        
	        
		} else if (op.equals("getUserByName")) {
			String username = request.getParameter("username");
			User user = facade.getUserByUsername(username);
			String jsonResponse = objectMapper.writeValueAsString(user);
	        response.getWriter().write(jsonResponse);
	        
	    // Vérifie si l'username et le password est valide    
		} else if (op.equals("login")) {
			// in : username, password en JSON (faut créer une classe avec tous les attributs qu'on peut recevoir en JSON quand on ne lit pas directement un objet)
			// out : ok ou ko
		} else if (op.equals("getCreatedQuizzes")) {
			// in : 
			// out :
		} else if (op.equals("getAnsweredQuizzes")) {
			// TODO
		}
		// classe Quizz
		
		// Rejoint un quizz avec le lien 
		else if (op.equals("joinQuizzLink")) {
			// in : l'ID généré par jpa (ou lien du Quizz dans un Json si l'ID marche pas)		
			// out : Quizz vierge, sans correction
		} else if (op.equals("addQuizz")) {
			// in : regarder interface.tsx => on reçoit le Json QuizzData (pour l'instant on gère pas les stats)
			// out : ok ou ko
		// Rejoint un quizz en cliquant sur un quizz qu'on a crée ou deja ajouté
		} else if (op.equals("joinQuizzID")) {
			
			// TODO
		// List de tous les quizz disponible
		} else if (op.equals("listQuizzes")) {
			// in : username de la personne connectée
			// out : la liste des Quizz de la base, sauf sauf crées par le user courant
		} else if (op.equals("getCreatedQuizzes")) {
			// in : username
			// out : quizzes crées par le user vierges
		} else if (op.equals("getAnsweredQuizzes")) {
			// in : username
			// out : quizzes répondus  par le user avec les réponses du user
		} else if (op.equals("getStatsQuizz")) {
			// TODO : on le fait pas pour l'instant
			
		} else if (op.equals("getProfile")) {
			// in : username
			// out : username, nombre de quizzes crées et répondus, pourcentage de bonnes réponses
		// Lorsque l'on a fini de répondre a un quizz
		} else if (op.equals("addAnsQuizz")) {
			// in : liste d'ID (unique dans la base) des réponses, et les réponses associées
			// out : ok ou jo
		} else if (op.equals("getCorrectionQuizz")) {
			
		} else {
			// nothing
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
